import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { X, Loader, Trash2, ExternalLink, Edit, Eye, Clock } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';
import { useData } from '../contexts/DataContext';

/*
-- REQUIRED SQL for this component to enable analytics --
-- Run this in your Supabase SQL Editor. This script is safe to re-run.

-- 1. Create table to store view events
CREATE TABLE IF NOT EXISTS public.proposal_views (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  proposal_slug TEXT NOT NULL,
  CONSTRAINT proposal_views_proposal_slug_fkey FOREIGN KEY (proposal_slug)
    REFERENCES public.proposals(slug) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_proposal_views_slug ON public.proposal_views(proposal_slug);

-- 2. Enable Row Level Security (RLS)
ALTER TABLE public.proposal_views ENABLE ROW LEVEL SECURITY;

-- 3. Create RLS policies (using DROP IF EXISTS to make it re-runnable)
DROP POLICY IF EXISTS "Allow anyone to insert a view record" ON public.proposal_views;
CREATE POLICY "Allow anyone to insert a view record"
ON public.proposal_views
FOR INSERT TO anon, authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow admins to read all view records" ON public.proposal_views;
CREATE POLICY "Allow admins to read all view records"
ON public.proposal_views
FOR SELECT TO authenticated
USING (true);

-- 4. Create analytics function
-- This function securely counts views for admins.
CREATE OR REPLACE FUNCTION public.get_proposals_with_view_counts()
RETURNS TABLE (
  slug TEXT,
  created_at TIMESTAMPTZ,
  view_count BIGINT,
  last_viewed TIMESTAMPTZ
)
LANGUAGE plpgsql
SECURITY DEFINER -- Important: allows the function to bypass RLS to count all views
AS $$
BEGIN
  RETURN QUERY
  SELECT
    p.slug,
    p.created_at,
    COUNT(v.id) AS view_count,
    MAX(v.created_at) AS last_viewed
  FROM
    public.proposals p
  LEFT JOIN
    public.proposal_views v ON p.slug = v.proposal_slug
  GROUP BY
    p.slug, p.created_at
  ORDER BY
    p.created_at DESC;
END;
$$;

-- 5. Grant permissions to database roles
GRANT USAGE ON SCHEMA public TO anon, authenticated;
-- Grant 'anon' (anonymous users) permission to insert into the views table.
GRANT INSERT ON TABLE public.proposal_views TO anon;
-- Grant 'authenticated' (admins) permission to select and insert.
GRANT SELECT, INSERT ON TABLE public.proposal_views TO authenticated;
-- Grant 'authenticated' (admins) permission to execute the counting function.
GRANT EXECUTE ON FUNCTION public.get_proposals_with_view_counts() TO authenticated;

-- 6. IMPORTANT: Refresh the schema cache
-- This ensures PostgREST sees the new table, function, and permissions immediately.
NOTIFY pgrst, 'reload schema';
*/

interface ProposalInfo {
  slug: string;
  created_at: string;
  view_count: number;
  last_viewed: string | null;
}

const ProposalListModal = ({ closeModal }: { closeModal: () => void }) => {
  const [proposals, setProposals] = useState<ProposalInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { deleteProposal } = useData();

  const fetchProposals = useCallback(async () => {
    setLoading(true);
    setError('');
    const { data, error } = await supabase
      .rpc('get_proposals_with_view_counts');

    if (error) {
      setError(`Failed to fetch proposals: ${error.message}`);
      console.error(error);
    } else {
      setProposals(data || []);
    }
    setLoading(false);
  }, []);

  useEffect(() => {
    fetchProposals();
  }, [fetchProposals]);

  const handleDelete = async (slug: string) => {
    if (slug === 'default') return;
    if (window.confirm(`Are you sure you want to delete the proposal "${slug}"? This action cannot be undone.`)) {
      try {
        await deleteProposal(slug);
        fetchProposals(); // Refresh the list after deletion
      } catch (err) {
        if (err instanceof Error) {
          alert(`Error deleting proposal: ${err.message}`);
        } else {
          alert('An unknown error occurred while deleting.');
        }
      }
    }
  };
  
  const formatDate = (dateString: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString('es-ES', {
        day: '2-digit',
        month: 'short',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
  }

  return (
    <motion.div
      className="fixed inset-0 bg-slate-900/80 backdrop-blur-sm flex items-center justify-center z-50 p-4"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <motion.div 
        className="w-full max-w-2xl bg-slate-800 p-8 rounded-2xl shadow-2xl border border-slate-700 relative flex flex-col"
        style={{ maxHeight: '90vh' }}
        initial={{ opacity: 0, y: -20, scale: 0.95 }}
        animate={{ opacity: 1, y: 0, scale: 1 }}
        exit={{ opacity: 0, y: -20, scale: 0.95 }}
        transition={{ duration: 0.3, ease: 'easeOut' }}
      >
        <div className="flex justify-between items-center mb-6 shrink-0">
            <h2 className="text-2xl font-bold text-[var(--color-primary)]">Gestionar Propuestas</h2>
            <button onClick={closeModal} className="p-2 rounded-full text-slate-400 hover:bg-slate-700 hover:text-slate-100 transition-colors">
              <X size={24}/>
            </button>
        </div>
        
        <div className="overflow-y-auto flex-grow">
            {loading ? (
                <div className="flex justify-center items-center h-48">
                    <Loader className="animate-spin text-[var(--color-primary)]" size={32} />
                </div>
            ) : error ? (
                <p className="text-red-400 text-center">{error}</p>
            ) : proposals.length === 0 ? (
                 <p className="text-slate-400 text-center">No se encontraron propuestas.</p>
            ) : (
                <ul className="space-y-3">
                    {proposals.map((proposal, index) => (
                        <motion.li 
                            key={proposal.slug}
                            className="bg-slate-700/50 p-4 rounded-lg border border-slate-600"
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.05 }}
                        >
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="font-semibold text-white capitalize">{proposal.slug.replace(/-/g, ' ')}</p>
                                    <p className="text-xs text-slate-400">Creada: {formatDate(proposal.created_at)}</p>
                                </div>
                                <div className="flex items-center gap-3">
                                    <a 
                                        href={proposal.slug === 'default' ? '/' : `/?proposal=${proposal.slug}`} 
                                        target="_blank" 
                                        rel="noopener noreferrer"
                                        className="p-2 text-slate-300 hover:text-[var(--color-primary)] transition-colors"
                                        title="Abrir Propuesta"
                                    >
                                        <ExternalLink size={18} />
                                    </a>
                                    <a
                                        href={proposal.slug === 'default' ? '/?edit=true' : `/?proposal=${proposal.slug}&edit=true`}
                                        className="p-2 text-slate-300 hover:text-blue-400 transition-colors"
                                        title="Editar Propuesta"
                                    >
                                        <Edit size={18} />
                                    </a>
                                    {proposal.slug !== 'default' && (
                                        <button 
                                            onClick={() => handleDelete(proposal.slug)}
                                            className="p-2 text-slate-400 hover:text-red-400 transition-colors"
                                            title="Eliminar Propuesta"
                                        >
                                            <Trash2 size={18} />
                                        </button>
                                    )}
                                </div>
                            </div>
                            <div className="mt-3 pt-3 border-t border-slate-600/50 flex items-center gap-6 text-xs text-slate-300">
                                <div className="flex items-center gap-2" title="Total Views">
                                    <Eye size={14} className="text-slate-400" />
                                    <span>{proposal.view_count} {proposal.view_count === 1 ? 'visita' : 'visitas'}</span>
                                </div>
                                <div className="flex items-center gap-2" title="Last Viewed">
                                    <Clock size={14} className="text-slate-400" />
                                    <span>Ãšltima visita: {proposal.last_viewed ? formatDate(proposal.last_viewed) : 'Nunca'}</span>
                                </div>
                            </div>
                        </motion.li>
                    ))}
                </ul>
            )}
        </div>
      </motion.div>
    </motion.div>
  );
};

export default ProposalListModal;