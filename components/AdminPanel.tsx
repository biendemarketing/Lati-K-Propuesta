


import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, ChevronDown, ChevronRight, LogOut, Plus, Trash2, Save, RotateCcw, Loader, Check, Sparkles, Palette, MessageSquare } from 'lucide-react';
import { GoogleGenAI, Type } from '@google/genai';
import { useData } from '../contexts/DataContext';
import { useAuth } from '../contexts/AuthContext';
import { iconNames } from './IconMapper';
import ImageUploader from './ImageUploader';
import get from 'lodash.get';
import type { ProposalComment, ProposalData } from '../lib/supabaseClient';
import EditableFieldWithAI from './EditableFieldWithAI';

/*
-- REQUIRED SQL for this component to enable comments --
-- Run this in your Supabase SQL Editor. This script is safe to re-run.

-- 1. Create table to store comments
CREATE TABLE IF NOT EXISTS public.proposal_comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  proposal_slug TEXT NOT NULL,
  author_name TEXT NOT NULL,
  comment_text TEXT NOT NULL,
  CONSTRAINT proposal_comments_proposal_slug_fkey FOREIGN KEY (proposal_slug)
    REFERENCES public.proposals(slug) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_proposal_comments_slug ON public.proposal_comments(proposal_slug);

-- 2. Enable Row Level Security (RLS)
ALTER TABLE public.proposal_comments ENABLE ROW LEVEL SECURITY;

-- 3. Create RLS policies (using DROP IF EXISTS to make it re-runnable)
DROP POLICY IF EXISTS "Allow anyone to insert a comment" ON public.proposal_comments;
CREATE POLICY "Allow anyone to insert a comment"
ON public.proposal_comments
FOR INSERT TO anon, authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow admins to read all comments" ON public.proposal_comments;
CREATE POLICY "Allow admins to read all comments"
ON public.proposal_comments
FOR SELECT TO authenticated
USING (true);

DROP POLICY IF EXISTS "Allow admins to delete comments" ON public.proposal_comments;
CREATE POLICY "Allow admins to delete comments"
ON public.proposal_comments
FOR DELETE TO authenticated
USING (true);

-- 4. Grant permissions to database roles
GRANT USAGE ON SCHEMA public TO anon, authenticated;
-- Grant 'anon' (anonymous users) permission to insert comments.
GRANT INSERT ON TABLE public.proposal_comments TO anon;
-- Grant 'authenticated' (admins) all permissions on comments.
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.proposal_comments TO authenticated;

-- 5. IMPORTANT: Refresh the schema cache
-- This ensures PostgREST sees the new table and policies immediately.
NOTIFY pgrst, 'reload schema';
*/

const API_KEY = 'AIzaSyBAYO5ltFsHTKfdhVZm0tLQCnRQxNmRcHU'; // Key provided by the user.
const ai = new GoogleGenAI({ apiKey: API_KEY });

const templates = [
  { id: 'classic', name: 'Classic', description: 'The complete proposal with all sections.' },
  { id: 'compact', name: 'Compact', description: 'A shorter proposal focusing on services and cost.' },
  { id: 'visual', name: 'Visual Focus', description: 'Highlights image-based sections like Proposal and Features.' },
  { id: 'services-focused', name: 'Services Focused', description: 'Focuses on the services list, omitting features.' },
  { id: 'minimalist', name: 'Minimalist', description: 'A direct quote showing only the included services and cost.' },
];

const palettes = [
  { name: 'Lati Amber', primary: '#f59e0b', primaryGradientFrom: '#f59e0b', primaryGradientTo: '#facc15' },
  { name: 'Sapphire Blue', primary: '#38bdf8', primaryGradientFrom: '#3b82f6', primaryGradientTo: '#818cf8' },
  { name: 'Emerald Green', primary: '#34d399', primaryGradientFrom: '#10b981', primaryGradientTo: '#6ee7b7' },
  { name: 'Ruby Red', primary: '#f43f5e', primaryGradientFrom: '#ef4444', primaryGradientTo: '#f97316' },
  { name: 'Amethyst Purple', primary: '#c084fc', primaryGradientFrom: '#a855f7', primaryGradientTo: '#d8b4fe' },
];

const Section = ({ title, id, children, isOpen, onToggle }: { title: string, id: string, children: React.ReactNode, isOpen: boolean, onToggle: () => void }) => (
    <div className="border-b border-slate-700">
      <button onClick={onToggle} className="w-full flex justify-between items-center p-4 hover:bg-slate-700/50">
        <h3 className="font-semibold text-lg">{title}</h3>
        {isOpen ? <ChevronDown /> : <ChevronRight />}
      </button>
      {isOpen && <div className="p-4 bg-slate-800/50">{children}</div>}
    </div>
);

const statusStyles: Record<string, string> = {
    'Draft': 'bg-slate-500/20 text-slate-300 border-slate-500/50',
    'Sent': 'bg-blue-500/20 text-blue-300 border-blue-500/50',
    'Accepted': 'bg-green-500/20 text-green-300 border-green-500/50',
    'Changes Requested': 'bg-yellow-500/20 text-yellow-300 border-yellow-500/50',
};


const AdminPanel = ({ closePanel }: { closePanel: () => void }) => {
  const { draftData, updateDraftData, addItem, removeItem, saveChanges, isDirty, discardChanges, resetData, fetchComments } = useData();
  const { logout } = useAuth();
  const [openSections, setOpenSections] = useState<Record<string, boolean>>({
      general: true
  });
  const [isSaving, setIsSaving] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [saveError, setSaveError] = useState('');
  const [comments, setComments] = useState<ProposalComment[]>([]);
  const [themePrompt, setThemePrompt] = useState('');
  const [isGeneratingTheme, setIsGeneratingTheme] = useState(false);
  const [generatedPalette, setGeneratedPalette] = useState<any>(null);

  useEffect(() => {
    const loadComments = async () => {
        const fetchedComments = await fetchComments();
        setComments(fetchedComments);
    };
    loadComments();
  }, [fetchComments]);

  const handleClose = () => {
    if (isDirty) {
      if (window.confirm("You have unsaved changes. Are you sure you want to close? Your changes will be discarded.")) {
        discardChanges();
        closePanel();
      }
    } else {
      closePanel();
    }
  };

  const handleDiscard = () => {
    if(isDirty && window.confirm("Are you sure you want to discard all changes since your last save?")) {
        discardChanges();
    } else if (!isDirty) {
        discardChanges();
    }
  };

  const handleSave = async () => {
    setIsSaving(true);
    setSaveSuccess(false);
    setSaveError('');
    try {
        await saveChanges();
        setSaveSuccess(true);
        setTimeout(() => setSaveSuccess(false), 2000); // Reset success state after 2s
    } catch (error) {
        if (error instanceof Error) {
            setSaveError(error.message);
        } else {
            setSaveError("An unknown error occurred while saving.");
        }
    } finally {
        setIsSaving(false);
    }
  };
  
  const handleReset = async () => {
    const confirmation = prompt("This is a destructive action. To confirm, please type 'RESET' below.");
    if (confirmation === 'RESET') {
        try {
            await resetData();
            alert("Data has been reset to defaults successfully.");
        } catch(error) {
            if (error instanceof Error) {
                alert(`Error resetting data: ${error.message}`);
            } else {
                alert('An unknown error occurred during reset.');
            }
        }
    } else {
        alert("Reset cancelled. Confirmation text did not match.");
    }
  };
  
  const handleSelectChange = (path: string, value: string) => {
    updateDraftData(path, value);
  };

  const toggleSection = (section: string) => {
    setOpenSections(prev => ({ ...prev, [section]: !prev[section] }));
  };

  const handleGenerateTheme = async () => {
    if (!themePrompt.trim() || !API_KEY) return;
    setIsGeneratingTheme(true);
    setGeneratedPalette(null);
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: `Generate a color palette for a web proposal based on this theme: "${themePrompt}". Provide a name for the palette. The colors should be aesthetically pleasing and professional. Provide the primary color, and two colors for a gradient.`,
            config: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        name: { type: Type.STRING },
                        primary: { type: Type.STRING, description: "A hex color code, e.g., #RRGGBB" },
                        primaryGradientFrom: { type: Type.STRING, description: "A hex color code, e.g., #RRGGBB" },
                        primaryGradientTo: { type: Type.STRING, description: "A hex color code, e.g., #RRGGBB" },
                    }
                }
            }
        });
        
        const jsonText = response.text.trim();
        const newPalette = JSON.parse(jsonText);
        setGeneratedPalette(newPalette);
    } catch(err) {
        console.error("Error generating theme:", err);
        alert("Failed to generate theme. See console for details.");
    } finally {
        setIsGeneratingTheme(false);
    }
  };

  const renderIconSelector = (label: string, path: string, currentValue: string) => (
    <div className="mb-2">
      <label className="block text-xs font-medium text-slate-400 mb-1">{label}</label>
      <select 
        value={currentValue} 
        onChange={(e) => handleSelectChange(path, e.target.value)}
        className="w-full bg-slate-700 border border-slate-600 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary)]"
      >
        {iconNames.map(name => <option key={name} value={name}>{name}</option>)}
      </select>
    </div>
  );

  if (!draftData) {
    return (
        <motion.div
            initial={{ x: '100%' }}
            animate={{ x: 0 }}
            exit={{ x: '100%' }}
            transition={{ type: 'spring', stiffness: 300, damping: 30 }}
            className="fixed top-0 right-0 h-full w-full max-w-lg bg-slate-800 text-slate-100 shadow-2xl z-50 border-l border-slate-700 flex items-center justify-center"
        >
            <p>Loading editor...</p>
        </motion.div>
    );
  }

  const currentStatus = get(draftData, 'status', 'Draft') as ProposalData['status'] || 'Draft';

  return (
    <motion.div
      initial={{ x: '100%' }}
      animate={{ x: 0 }}
      exit={{ x: '100%' }}
      transition={{ type: 'spring', stiffness: 300, damping: 30 }}
      className="fixed top-0 right-0 h-full w-full max-w-lg bg-slate-800 text-slate-100 shadow-2xl z-50 border-l border-slate-700 flex flex-col"
    >
      <div className="flex justify-between items-center p-4 border-b border-slate-700 shrink-0">
        <h2 className="text-xl font-bold text-[var(--color-primary)]">Edit Content</h2>
        <button onClick={handleClose} className="p-2 rounded-full hover:bg-slate-700"><X /></button>
      </div>
      <div className="overflow-y-auto flex-grow">

        <Section title="Status & Comments" id="status" isOpen={!!openSections['status']} onToggle={() => toggleSection('status')}>
            <div className="mb-4">
                 <label className="block text-xs font-medium text-slate-400 mb-1">Current Status</label>
                 <span className={`inline-block px-3 py-1 text-sm font-semibold rounded-full border ${statusStyles[currentStatus] || statusStyles['Draft']}`}>
                    {currentStatus}
                </span>
            </div>
            <div>
                 <h4 className="font-semibold text-base mb-2 flex items-center gap-2"><MessageSquare size={18}/> Client Comments</h4>
                 {comments.length > 0 ? (
                    <div className="space-y-3 max-h-60 overflow-y-auto pr-2">
                        {comments.map(comment => (
                            <div key={comment.id} className="bg-slate-700/50 p-3 rounded-lg">
                                <p className="text-sm text-slate-300">"{comment.comment_text}"</p>
                                <div className="text-right text-xs text-slate-400 mt-2">
                                    - <span className="font-semibold">{comment.author_name}</span> on {new Date(comment.created_at).toLocaleDateString()}
                                </div>
                            </div>
                        ))}
                    </div>
                 ) : <p className="text-sm text-slate-400">No comments received yet.</p>}
            </div>
        </Section>
        
        <Section title="General Settings" id="general" isOpen={!!openSections['general']} onToggle={() => toggleSection('general')}>
          <ImageUploader path="logoUrl" currentImageUrl={draftData.logoUrl} />
           <div className="my-4">
              <label className="block text-xs font-medium text-slate-400 mb-2">Proposal Template</label>
              <div className="space-y-2">
                  {templates.map(template => (
                      <button 
                          key={template.id}
                          onClick={() => updateDraftData('template', template.id)}
                           className={`w-full p-3 rounded-md border-2 text-left transition-all flex items-center gap-3 ${
                            get(draftData, 'template', 'classic') === template.id 
                            ? 'border-[var(--color-primary)] bg-slate-700/50' 
                            : 'border-slate-600 hover:border-slate-500 bg-slate-700'
                          }`}
                      >
                         <div className="w-5 h-5 rounded-full border-2 flex items-center justify-center flex-shrink-0" style={{borderColor: get(draftData, 'template', 'classic') === template.id ? 'var(--color-primary)' : 'rgb(71 85 105)'}}>
                           { get(draftData, 'template', 'classic') === template.id && <div className="w-2.5 h-2.5 rounded-full bg-[var(--color-primary)]"></div>}
                         </div>
                         <div>
                            <p className="font-semibold text-sm">{template.name}</p>
                            <p className="text-xs text-slate-400">{template.description}</p>
                         </div>
                      </button>
                  ))}
              </div>
          </div>
          <div className="my-4">
              <label className="block text-xs font-medium text-slate-400 mb-2">Color Theme</label>
              <div className="grid grid-cols-5 gap-2">
                  {[...palettes, generatedPalette].filter(Boolean).map(palette => (
                      <button 
                          key={palette.name}
                          onClick={() => updateDraftData('theme', palette)}
                          className={`h-12 w-full rounded-md border-2 transition-all ${get(draftData, 'theme.name') === palette.name ? 'border-white ring-2 ring-white' : 'border-transparent hover:border-slate-500'}`}
                          style={{ background: `linear-gradient(to right, ${palette.primaryGradientFrom}, ${palette.primaryGradientTo})` }}
                          title={palette.name}
                      />
                  ))}
              </div>
          </div>
          <div className="my-4 p-4 border border-slate-700 rounded-lg bg-slate-800">
                <h4 className="text-sm font-semibold mb-2 flex items-center gap-2"><Palette size={16}/> Generate Theme with AI</h4>
                <p className="text-xs text-slate-400 mb-3">Describe a theme to generate a new color palette.</p>
                <div className="flex gap-2">
                    <input type="text" value={themePrompt} onChange={e => setThemePrompt(e.target.value)} placeholder="e.g., a sophisticated, nocturnal theme" className="flex-grow bg-slate-700 border border-slate-600 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary)]" />
                    <button onClick={handleGenerateTheme} disabled={isGeneratingTheme} className="w-32 flex items-center justify-center gap-2 bg-slate-600 hover:bg-slate-500 text-white font-bold py-2 px-3 rounded-lg text-sm disabled:opacity-50">
                        {isGeneratingTheme ? <Loader size={16} className="animate-spin" /> : <><Sparkles size={16}/> Generate</>}
                    </button>
                </div>
          </div>
        </Section>
        
        <Section title="Hero Section" id="hero" isOpen={!!openSections['hero']} onToggle={() => toggleSection('hero')}>
          <ImageUploader path="hero.backgroundImageUrl" currentImageUrl={draftData.hero.backgroundImageUrl} />
          <EditableFieldWithAI label="Subtitle" path="hero.subtitle" value={get(draftData, 'hero.subtitle')} onChange={updateDraftData} />
          <EditableFieldWithAI label="Title" path="hero.title" value={get(draftData, 'hero.title')} onChange={updateDraftData} />
          <EditableFieldWithAI label="Description" path="hero.description" type="textarea" value={get(draftData, 'hero.description')} onChange={updateDraftData} />
          <div className="grid grid-cols-2 gap-4">
            <EditableFieldWithAI label="Client Label" path="hero.clientLabel" value={get(draftData, 'hero.clientLabel')} onChange={updateDraftData} />
            <EditableFieldWithAI label="Client Name" path="hero.clientName" value={get(draftData, 'hero.clientName')} onChange={updateDraftData} />
            <EditableFieldWithAI label="Activity Label" path="hero.activityLabel" value={get(draftData, 'hero.activityLabel')} onChange={updateDraftData} />
            <EditableFieldWithAI label="Activity Name" path="hero.activityName" value={get(draftData, 'hero.activityName')} onChange={updateDraftData} />
            <EditableFieldWithAI label="Theme Label" path="hero.themeLabel" value={get(draftData, 'hero.themeLabel')} onChange={updateDraftData} />
            <EditableFieldWithAI label="Theme Name" path="hero.themeName" value={get(draftData, 'hero.themeName')} onChange={updateDraftData} />
          </div>
        </Section>

        <Section title="Proposal Section" id="proposal" isOpen={!!openSections['proposal']} onToggle={() => toggleSection('proposal')}>
           <EditableFieldWithAI label="Section Title" path="proposal.title" value={get(draftData, 'proposal.title')} onChange={updateDraftData} />
           {draftData.proposal.cards.map((card, index) => (
             <div key={`proposal-card-${index}`} className="p-3 my-2 border border-slate-600 rounded-md relative">
                <h4 className="font-semibold mb-2">Card {index+1}</h4>
                 <button onClick={() => removeItem('proposal.cards', index)} className="absolute top-2 right-2 p-1 text-slate-400 hover:text-red-400"><Trash2 size={16}/></button>
                <EditableFieldWithAI label="Card Title" path={`proposal.cards.${index}.title`} value={card.title} onChange={updateDraftData} />
                <EditableFieldWithAI label="Card Description" path={`proposal.cards.${index}.description`} type="textarea" value={card.description} onChange={updateDraftData} />
                <ImageUploader path={`proposal.cards.${index}.imageUrl`} currentImageUrl={card.imageUrl} />
             </div>
           ))}
           <button onClick={() => addItem('proposal.cards')} className="mt-2 text-sm flex items-center gap-2 text-[var(--color-primary)] font-semibold"><Plus size={16}/> Add Proposal Card</button>
        </Section>
        
        <Section title="Services Section" id="services" isOpen={!!openSections['services']} onToggle={() => toggleSection('services')}>
            <EditableFieldWithAI label="Section Title" path="services.title" value={get(draftData, 'services.title')} onChange={updateDraftData} />
            {draftData.services.cards.map((card, index) => (
             <div key={`service-card-${index}`} className="p-3 my-2 border border-slate-600 rounded-md relative">
                <div className="flex justify-between items-center mb-2">
                    <h4 className="font-semibold">Service Card {index+1}</h4>
                    <button onClick={() => removeItem('services.cards', index)} className="p-1 text-slate-400 hover:text-red-400"><Trash2 size={16}/></button>
                </div>
                <div className="flex items-center gap-2 mb-2">
                    <input type="checkbox" id={`service_enabled_${index}`} checked={card.enabled} onChange={(e) => updateDraftData(`services.cards.${index}.enabled`, e.target.checked)} />
                    <label htmlFor={`service_enabled_${index}`} className="text-sm font-medium">Enabled</label>
                </div>
                <EditableFieldWithAI label="Service Title" path={`services.cards.${index}.title`} value={card.title} onChange={updateDraftData} />
                {renderIconSelector('Icon', `services.cards.${index}.icon`, card.icon)}
                <EditableFieldWithAI label="List items (one per line)" path={`services.cards.${index}.items`} type="textarea" value={Array.isArray(card.items) ? card.items.join('\n') : ''} onChange={(path, value) => updateDraftData(path, value.split('\n'))} />
                <ImageUploader path={`services.cards.${index}.imageUrl`} currentImageUrl={card.imageUrl} />
             </div>
           ))}
           <button onClick={() => addItem('services.cards')} className="mt-2 text-sm flex items-center gap-2 text-[var(--color-primary)] font-semibold"><Plus size={16}/> Add Service Card</button>
        </Section>

         <Section title="Features Section" id="features" isOpen={!!openSections['features']} onToggle={() => toggleSection('features')}>
            <EditableFieldWithAI label="Section Title" path="features.title" value={get(draftData, 'features.title')} onChange={updateDraftData} />
            {draftData.features.items.map((item, index) => (
             <div key={`feature-item-${index}`} className="p-3 my-2 border border-slate-600 rounded-md relative">
                 <h4 className="font-semibold mb-2">Feature {index+1}</h4>
                 <button onClick={() => removeItem('features.items', index)} className="absolute top-2 right-2 p-1 text-slate-400 hover:text-red-400"><Trash2 size={16}/></button>
                 <div className="flex items-center gap-2 mb-2">
                    <input type="checkbox" id={`feature_reverse_${index}`} checked={item.reverse} onChange={(e) => updateDraftData(`features.items.${index}.reverse`, e.target.checked)} />
                    <label htmlFor={`feature_reverse_${index}`} className="text-sm font-medium">Reverse Layout</label>
                </div>
                <EditableFieldWithAI label="Feature Title" path={`features.items.${index}.title`} value={item.title} onChange={updateDraftData} />
                {renderIconSelector('Icon', `features.items.${index}.icon`, item.icon)}
                <EditableFieldWithAI label="Feature Description" path={`features.items.${index}.description`} type="textarea" value={item.description} onChange={updateDraftData} />
                <ImageUploader path={`features.items.${index}.imageUrl`} currentImageUrl={item.imageUrl} />
             </div>
           ))}
           <button onClick={() => addItem('features.items')} className="mt-2 text-sm flex items-center gap-2 text-[var(--color-primary)] font-semibold"><Plus size={16}/> Add Feature</button>
        </Section>

        <Section title="Included Section" id="included" isOpen={!!openSections['included']} onToggle={() => toggleSection('included')}>
            <EditableFieldWithAI label="Section Title" path="included.title" value={get(draftData, 'included.title')} onChange={updateDraftData} />
            <hr className="my-4 border-slate-600"/>
            <EditableFieldWithAI label="List Title" path="included.listTitle" value={get(draftData, 'included.listTitle')} onChange={updateDraftData} />
             {draftData.included.items.map((item, index) => (
             <div key={`included-item-${index}`} className="p-3 my-2 border border-slate-600 rounded-md relative">
                 <h4 className="font-semibold mb-2">Item {index+1}</h4>
                 <button onClick={() => removeItem('included.items', index)} className="absolute top-2 right-2 p-1 text-slate-400 hover:text-red-400"><Trash2 size={16}/></button>
                {renderIconSelector('Icon', `included.items.${index}.icon`, item.icon)}
                <EditableFieldWithAI label="Item text" path={`included.items.${index}.text`} value={item.text} onChange={updateDraftData} />
             </div>
           ))}
           <button onClick={() => addItem('included.items')} className="mt-2 text-sm flex items-center gap-2 text-[var(--color-primary)] font-semibold"><Plus size={16}/> Add Included Item</button>
            <hr className="my-4 border-slate-600"/>
            <EditableFieldWithAI label="Cost Title" path="included.costTitle" value={get(draftData, 'included.costTitle')} onChange={updateDraftData} />
            <EditableFieldWithAI label="Cost Amount" path="included.cost" value={get(draftData, 'included.cost')} onChange={updateDraftData} />
            <EditableFieldWithAI label="Cost Description" path="included.costDescription" value={get(draftData, 'included.costDescription')} onChange={updateDraftData} />
            <EditableFieldWithAI label="Button Text" path="included.ctaButtonText" value={get(draftData, 'included.ctaButtonText')} onChange={updateDraftData} />
        </Section>

        <Section title="Danger Zone" id="danger" isOpen={!!openSections['danger']} onToggle={() => toggleSection('danger')}>
            <div className="flex justify-between items-center">
                <div>
                    <h4 className="font-semibold">Reset Data</h4>
                    <p className="text-xs text-slate-400">Reverts all content to the original defaults.</p>
                </div>
                <button onClick={handleReset} className="text-sm bg-red-800 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">Reset to Defaults</button>
            </div>
             <div className="flex justify-between items-center mt-4">
                <div>
                    <h4 className="font-semibold">Logout</h4>
                    <p className="text-xs text-slate-400">End your current session.</p>
                </div>
                <button onClick={logout} className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-slate-100 font-bold py-2 px-4 rounded-lg">
                    <LogOut size={16} /> Logout
                </button>
            </div>
        </Section>
        
        <Section title="Ayuda / Help" id="help" isOpen={!!openSections['help']} onToggle={() => toggleSection('help')}>
            <div className="space-y-4 text-sm text-slate-300">
                <div>
                    <h4 className="font-semibold text-base text-white mb-2">¿Cómo usar el editor?</h4>
                    <ul className="list-disc list-inside space-y-1 pl-2">
                        <li><strong>Editar Contenido:</strong> Simplemente haz clic en cualquier campo y escribe. Los cambios se reflejan en vivo en la propuesta.</li>
                        <li><strong>Guardar Cambios:</strong> Tus cambios no son permanentes hasta que presionas el botón <span className="font-bold text-[var(--color-primary)]">"Save Changes"</span>.</li>
                        <li><strong>Descartar Cambios:</strong> Si cometes un error, el botón <span className="font-bold text-slate-400">"Discard Changes"</span> restaurará el contenido a la última versión guardada.</li>
                        <li><strong>Plantillas y Temas:</strong> En "General Settings", puedes cambiar toda la estructura (Plantilla) y los colores (Tema) de la propuesta con un solo clic.</li>
                        <li><strong>Subir Imágenes:</strong> Haz clic en "Cambiar imagen" para subir un archivo. Usa el botón de chispas ✨ para generar una imagen con IA.</li>
                    </ul>
                </div>
                <div>
                    <h4 className="font-semibold text-base text-white mb-2">Gestionar Propuestas</h4>
                    <ul className="list-disc list-inside space-y-1 pl-2">
                        <li>Usa la barra de navegación para:
                            <ul className="list-['-_'] list-inside pl-4">
                               <li><strong className="text-purple-400">Gestionar</strong> todas tus propuestas.</li>
                               <li><strong className="text-green-400">Crear</strong> una nueva propuesta.</li>
                               <li><strong className="text-blue-400">Editar</strong> la propuesta actual (abre este panel).</li>
                            </ul>
                        </li>
                         <li><strong>Descargar como PDF:</strong> Usa el botón de descarga para generar un PDF. Puedes elegir orientación vertical u horizontal.</li>
                    </ul>
                </div>
            </div>
        </Section>

      </div>
      <div className="p-4 bg-slate-900 border-t border-slate-700 flex justify-end items-center gap-4 shrink-0">
          <button 
            onClick={handleDiscard} 
            disabled={!isDirty || isSaving}
            className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 disabled:bg-slate-800 disabled:text-slate-500 disabled:cursor-not-allowed text-slate-100 font-bold py-2 px-4 rounded-lg transition-colors"
           >
              <RotateCcw size={16} /> Discard Changes
          </button>
          <button 
            onClick={handleSave} 
            disabled={!isDirty || isSaving}
            className={`flex items-center justify-center gap-2 w-40 text-slate-900 font-bold py-2 px-4 rounded-lg transition-all duration-300
              ${isSaving ? 'bg-slate-600 text-slate-400 cursor-not-allowed' : ''}
              ${saveSuccess ? 'bg-green-500' : `bg-gradient-to-r from-[var(--color-primary-gradient-from)] to-[var(--color-primary-gradient-to)]`}
              ${!isDirty && !isSaving && !saveSuccess ? 'disabled:from-slate-600 disabled:to-slate-700 disabled:text-slate-400 disabled:cursor-not-allowed' : 'hover:opacity-90'}
            `}
          >
            <AnimatePresence mode="popLayout" initial={false}>
              {isSaving ? (
                <motion.div key="saving" initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: 10 }} className="flex items-center gap-2">
                  <Loader size={16} className="animate-spin" />
                  <span>Saving...</span>
                </motion.div>
              ) : saveSuccess ? (
                <motion.div key="success" initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: 10 }} className="flex items-center gap-2">
                  <Check size={16} />
                  <span>Saved!</span>
                </motion.div>
              ) : (
                <motion.div key="default" initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: 10 }} className="flex items-center gap-2">
                   <Save size={16} />
                   <span>Save Changes</span>
                </motion.div>
              )}
            </AnimatePresence>
          </button>
      </div>
       {saveError && <div className="absolute bottom-20 right-4 bg-red-800 text-white text-sm p-3 rounded-lg shadow-lg">{saveError}</div>}
    </motion.div>
  );
};

export default AdminPanel;